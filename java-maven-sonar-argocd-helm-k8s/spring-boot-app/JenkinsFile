pipeline {
    agent {
        docker {
            image 'janakiram26/maven-docker-agent:v1'
            args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
        }
    }

    stages {
        stage('Checkout') {
            steps {
                sh 'pwd'
                sh 'echo ✅ Checkout stage started'
                git branch: 'main', url: 'https://github.com/Jaaki26/Simplified-CICD-GitOps-with-Jenkins-and-ArgoCD.git'
                sh 'ls -ltr'
            }
        }

        stage('Build and Test') {
            steps {
                sh 'echo ✅ Running Maven Build'
                sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
            }
        }

        stage('Static Code Analysis') {
            environment {
                SONAR_URL = "http://51.143.219.233:9000/"  // Replace with your SonarQube server
            }
            steps {
                withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                    sh '''
                        cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
                        mvn sonar:sonar -Dsonar.token=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}
                    '''
                }
            }
        }

        stage('Build and Push Docker Image') {
            environment {
                DOCKER_IMAGE = "janakiram26/ultimate-cicd:${BUILD_NUMBER}" // Replace with your DockerHub account
                DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
            }
            steps {
                script {
                    sh '''
                        cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
                        docker build -t ${DOCKER_IMAGE} -f ${DOCKERFILE_LOCATION} .
                    '''
                    def dockerImage = docker.image("${DOCKER_IMAGE}")
                    docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                        dockerImage.push()
                    }
                }
            }
        }

        stage('Update Deployment File') {
            environment {
                GIT_REPO_NAME = "Simplified-CICD-GitOps-with-Jenkins-and-ArgoCD" 
                GIT_USER_NAME = "Jaaki26" 
            }
            steps {
                withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                    sh '''
                        git config user.email "padala.janakiram11@gmail.com"
                        git config user.name "jake"

                        # Update the Docker image tag in deployment manifest safely
                        sed -i "s#janakiram26/ultimate-cicd:[0-9]\\+#janakiram26/ultimate-cicd:${BUILD_NUMBER}#g" \
                        java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml

                        git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                        git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                        git remote set-url origin https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git
                        git push origin main
                    '''
                }
            }
        }
    }

    post {
        success {
            echo "✅ Pipeline completed successfully!"
        }
        failure {
            echo "❌ Pipeline failed. Check logs."
        }
        always {
            sh 'docker system prune -f'
        }
    }
}
